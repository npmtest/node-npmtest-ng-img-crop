{"/home/travis/build/npmtest/node-npmtest-ng-img-crop/test.js":"/* istanbul instrument in package npmtest_ng_img_crop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng-img-crop/lib.npmtest_ng_img_crop.js":"/* istanbul instrument in package npmtest_ng_img_crop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ng_img_crop = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ng_img_crop = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ng-img-crop/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ng-img-crop && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ng_img_crop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ng_img_crop\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ng_img_crop.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ng_img_crop.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ng_img_crop.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ng_img_crop.__dirname + '/lib.npmtest_ng_img_crop.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/gulpfile.js":"'use strict';\r\nvar argv         = require('minimist')(process.argv.slice(2)),\r\n    gulp         = require('gulp'),\r\n    header       = require('gulp-header'),\r\n    gutil        = require('gulp-util'),\r\n    ngAnnotate   = require('gulp-ng-annotate'),\r\n    compass      = require('gulp-compass'),\r\n    refresh      = require('gulp-livereload'),\r\n    prefix       = require('gulp-autoprefixer'),\r\n    minifyCss    = require('gulp-minify-css'),\r\n    uglify       = require('gulp-uglify'),\r\n    clean        = require('gulp-rimraf'),\r\n    concat       = require('gulp-concat-util'),\r\n    express      = require('express'),\r\n    express_lr   = require('connect-livereload'),\r\n    tinylr       = require('tiny-lr'),\r\n    opn          = require('opn'),\r\n    jshint       = require('gulp-jshint'),\r\n    jshintStylish= require('jshint-stylish'),\r\n    pkg          = require('./package.json'),\r\n    lr,\r\n    refresh_lr;\r\n\r\nvar today = new Date();\r\n\r\n// Configuration\r\n\r\nvar Config = {\r\n  port: 9000,\r\n  livereloadPort: 35728,\r\n  testPage: 'test/ng-img-crop.html',\r\n  cache: (typeof argv.cache !== 'undefined' ? !!argv.cache : true),\r\n  paths: {\r\n    source:   {\r\n      root:   'source',\r\n      js:     'source/js',\r\n      scss:   'source/scss'\r\n    },\r\n    compileUnminified: {\r\n      root:   'compile/unminified',\r\n      js:     'compile/unminified',\r\n      css:    'compile/unminified'\r\n    },\r\n    compileMinified: {\r\n      root:   'compile/minified',\r\n      js:     'compile/minified',\r\n      css:    'compile/minified'\r\n    }\r\n  },\r\n  banners: {\r\n    unminified: '/*!\\n' +\r\n                ' * ' + pkg.prettyName + ' v' + pkg.version + '\\n' +\r\n                ' * ' + pkg.homepage + '\\n' +\r\n                ' *\\n' +\r\n                ' * Copyright (c) ' + (today.getFullYear()) + ' ' + pkg.author.name +'\\n' +\r\n                ' * License: ' + pkg.license + '\\n' +\r\n                ' *\\n' +\r\n                ' * Generated at ' + gutil.date(today, 'dddd, mmmm dS, yyyy, h:MM:ss TT') + '\\n' +\r\n                ' */',\r\n    minified: '/*! ' + pkg.prettyName + ' v' + pkg.version + ' License: ' + pkg.license + ' */'\r\n  }\r\n};\r\n\r\n// Tasks\r\n// =====\r\n\r\n// Compile Styles\r\ngulp.task('styles', function(){\r\n  return gulp.src(Config.paths.source.scss + '/'+pkg.name+'.scss')\r\n    .pipe(compass({\r\n      sass: Config.paths.source.scss,\r\n      css: Config.paths.compileUnminified.css,\r\n      errLogToConsole: true\r\n    }))\r\n    .pipe(prefix('last 2 version', '> 5%', 'safari 5', 'ie 8', 'ie 7', 'opera 12.1', 'ios 6', 'android 4'))\r\n    .pipe(gulp.dest(Config.paths.compileUnminified.css));\r\n});\r\n\r\n// Compile Scripts\r\ngulp.task('scripts', function(){\r\n  return gulp.src([\r\n      Config.paths.source.js + '/init.js',\r\n      Config.paths.source.js + '/classes/*.js',\r\n      Config.paths.source.js + '/ng-img-crop.js'\r\n    ])\r\n    .pipe(concat(pkg.name+'.js', {\r\n      separator: '\\n\\n',\r\n      process: function(src) {\r\n        // Remove all 'use strict'; from the code and\r\n        // replaces all double blank lines with one\r\n        return src.replace(/'use strict';\\n+/g, '')\r\n                  .replace(/\\n\\n\\s*\\n/g, '\\n\\n');\r\n      }\r\n    }))\r\n    .pipe(concat.header(Config.banners.unminified + '\\n' +\r\n                        '(function() {\\n\\'use strict\\';\\n\\n'))\r\n    .pipe(concat.footer('\\n}());'))\r\n    .pipe(gulp.dest(Config.paths.compileUnminified.js));\r\n});\r\n\r\n\r\n// Make a Distrib\r\ngulp.task('dist:js:clean', function(){\r\n  return gulp.src([Config.paths.compileMinified.root + '/**/*.js'], { read: false })\r\n    .pipe(clean());\r\n});\r\ngulp.task('dist:css:clean', function(){\r\n  return gulp.src([Config.paths.compileMinified.root + '/**/*.css'], { read: false })\r\n    .pipe(clean());\r\n});\r\ngulp.task('dist:js', ['dist:js:clean', 'scripts'], function(){\r\n  return gulp.src(Config.paths.compileUnminified.js + '/**/*.js')\r\n    .pipe(ngAnnotate())\r\n    .pipe(uglify())\r\n    .pipe(header(Config.banners.minified))\r\n    .pipe(gulp.dest(Config.paths.compileMinified.js));\r\n});\r\ngulp.task('dist:css', ['dist:css:clean', 'styles'], function(){\r\n  return gulp.src(Config.paths.compileUnminified.css + '/**/*.css')\r\n    .pipe(minifyCss())\r\n    .pipe(gulp.dest(Config.paths.compileMinified.css));\r\n});\r\n\r\n// Server\r\ngulp.task('server', function(){\r\n  express()\r\n    .use(express_lr())\r\n    .use(express.static('.'))\r\n    .listen(Config.port);\r\n  gutil.log('Server listening on port ' + Config.port);\r\n});\r\n\r\n// LiveReload\r\ngulp.task('livereload', function(){\r\n  lr = tinylr();\r\n  lr.listen(Config.livereloadPort, function(err) {\r\n    if(err) {\r\n      gutil.log('Livereload error:', err);\r\n    }\r\n  });\r\n  refresh_lr=refresh(lr);\r\n});\r\n\r\n// Watches\r\ngulp.task('watch', function(){\r\n  gulp.watch(Config.paths.source.scss + '/**/*.scss', ['styles']);\r\n  gulp.watch([Config.paths.source.js + '/**/*.js'], ['scripts']);\r\n  gulp.watch([\r\n    Config.paths.compileUnminified.css + '/**/*.css',\r\n    Config.paths.compileUnminified.js + '/**/*.js',\r\n    Config.testPage\r\n  ], function(evt){\r\n    refresh_lr.changed(evt.path);\r\n  });\r\n});\r\n\r\n\r\n// User commands\r\n// =============\r\n\r\n// Code linter\r\ngulp.task('lint', function() {\r\n  return gulp.src(Config.paths.source.js + '/**/*.js')\r\n    .pipe(jshint())\r\n    .pipe(jshint.reporter(jshintStylish));\r\n});\r\n\r\n// Build\r\ngulp.task('build', ['dist:js', 'dist:css']);\r\n\r\n// Start server and watch for changes\r\ngulp.task('default', ['server', 'livereload', 'styles', 'scripts', 'watch'], function(){\r\n  // use the -o arg to open the test page in the browser\r\n  if(argv.o) {\r\n    opn('http://localhost:' + Config.port+'/'+Config.testPage);\r\n  }\r\n});","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/compile/minified/ng-img-crop.js":"/*! ngImgCrop v0.2.0 License: MIT */!function(){\"use strict\";var e=angular.module(\"ngImgCrop\",[]);e.factory(\"cropAreaCircle\",[\"cropArea\",function(e){var t=function(){e.apply(this,arguments),this._boxResizeBaseSize=20,this._boxResizeNormalRatio=.9,this._boxResizeHoverRatio=1.2,this._iconMoveNormalRatio=.9,this._iconMoveHoverRatio=1.2,this._boxResizeNormalSize=this._boxResizeBaseSize*this._boxResizeNormalRatio,this._boxResizeHoverSize=this._boxResizeBaseSize*this._boxResizeHoverRatio,this._posDragStartX=0,this._posDragStartY=0,this._posResizeStartX=0,this._posResizeStartY=0,this._posResizeStartSize=0,this._boxResizeIsHover=!1,this._areaIsHover=!1,this._boxResizeIsDragging=!1,this._areaIsDragging=!1};return t.prototype=new e,t.prototype._calcCirclePerimeterCoords=function(e){var t=this._size/2,i=e*(Math.PI/180),s=this._x+t*Math.cos(i),r=this._y+t*Math.sin(i);return[s,r]},t.prototype._calcResizeIconCenterCoords=function(){return this._calcCirclePerimeterCoords(-45)},t.prototype._isCoordWithinArea=function(e){return Math.sqrt((e[0]-this._x)*(e[0]-this._x)+(e[1]-this._y)*(e[1]-this._y))<this._size/2},t.prototype._isCoordWithinBoxResize=function(e){var t=this._calcResizeIconCenterCoords(),i=this._boxResizeHoverSize/2;return e[0]>t[0]-i&&e[0]<t[0]+i&&e[1]>t[1]-i&&e[1]<t[1]+i},t.prototype._drawArea=function(e,t,i){e.arc(t[0],t[1],i/2,0,2*Math.PI)},t.prototype.draw=function(){e.prototype.draw.apply(this,arguments),this._cropCanvas.drawIconMove([this._x,this._y],this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio),this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(),this._boxResizeBaseSize,this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio)},t.prototype.processMouseMove=function(e,t){var i=\"default\",s=!1;if(this._boxResizeIsHover=!1,this._areaIsHover=!1,this._areaIsDragging)this._x=e-this._posDragStartX,this._y=t-this._posDragStartY,this._areaIsHover=!0,i=\"move\",s=!0,this._events.trigger(\"area-move\");else if(this._boxResizeIsDragging){i=\"nesw-resize\";var r,o,a;o=e-this._posResizeStartX,a=this._posResizeStartY-t,r=o>a?this._posResizeStartSize+2*a:this._posResizeStartSize+2*o,this._size=Math.max(this._minSize,r),this._boxResizeIsHover=!0,s=!0,this._events.trigger(\"area-resize\")}else this._isCoordWithinBoxResize([e,t])?(i=\"nesw-resize\",this._areaIsHover=!1,this._boxResizeIsHover=!0,s=!0):this._isCoordWithinArea([e,t])&&(i=\"move\",this._areaIsHover=!0,s=!0);return this._dontDragOutside(),angular.element(this._ctx.canvas).css({cursor:i}),s},t.prototype.processMouseDown=function(e,t){this._isCoordWithinBoxResize([e,t])?(this._areaIsDragging=!1,this._areaIsHover=!1,this._boxResizeIsDragging=!0,this._boxResizeIsHover=!0,this._posResizeStartX=e,this._posResizeStartY=t,this._posResizeStartSize=this._size,this._events.trigger(\"area-resize-start\")):this._isCoordWithinArea([e,t])&&(this._areaIsDragging=!0,this._areaIsHover=!0,this._boxResizeIsDragging=!1,this._boxResizeIsHover=!1,this._posDragStartX=e-this._x,this._posDragStartY=t-this._y,this._events.trigger(\"area-move-start\"))},t.prototype.processMouseUp=function(){this._areaIsDragging&&(this._areaIsDragging=!1,this._events.trigger(\"area-move-end\")),this._boxResizeIsDragging&&(this._boxResizeIsDragging=!1,this._events.trigger(\"area-resize-end\")),this._areaIsHover=!1,this._boxResizeIsHover=!1,this._posDragStartX=0,this._posDragStartY=0},t}]),e.factory(\"cropAreaSquare\",[\"cropArea\",function(e){var t=function(){e.apply(this,arguments),this._resizeCtrlBaseRadius=10,this._resizeCtrlNormalRatio=.75,this._resizeCtrlHoverRatio=1,this._iconMoveNormalRatio=.9,this._iconMoveHoverRatio=1.2,this._resizeCtrlNormalRadius=this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio,this._resizeCtrlHoverRadius=this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio,this._posDragStartX=0,this._posDragStartY=0,this._posResizeStartX=0,this._posResizeStartY=0,this._posResizeStartSize=0,this._resizeCtrlIsHover=-1,this._areaIsHover=!1,this._resizeCtrlIsDragging=-1,this._areaIsDragging=!1};return t.prototype=new e,t.prototype._calcSquareCorners=function(){var e=this._size/2;return[[this._x-e,this._y-e],[this._x+e,this._y-e],[this._x-e,this._y+e],[this._x+e,this._y+e]]},t.prototype._calcSquareDimensions=function(){var e=this._size/2;return{left:this._x-e,top:this._y-e,right:this._x+e,bottom:this._y+e}},t.prototype._isCoordWithinArea=function(e){var t=this._calcSquareDimensions();return e[0]>=t.left&&e[0]<=t.right&&e[1]>=t.top&&e[1]<=t.bottom},t.prototype._isCoordWithinResizeCtrl=function(e){for(var t=this._calcSquareCorners(),i=-1,s=0,r=t.length;r>s;s++){var o=t[s];if(e[0]>o[0]-this._resizeCtrlHoverRadius&&e[0]<o[0]+this._resizeCtrlHoverRadius&&e[1]>o[1]-this._resizeCtrlHoverRadius&&e[1]<o[1]+this._resizeCtrlHoverRadius){i=s;break}}return i},t.prototype._drawArea=function(e,t,i){var s=i/2;e.rect(t[0]-s,t[1]-s,i,i)},t.prototype.draw=function(){e.prototype.draw.apply(this,arguments),this._cropCanvas.drawIconMove([this._x,this._y],this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);for(var t=this._calcSquareCorners(),i=0,s=t.length;s>i;i++){var r=t[i];this._cropCanvas.drawIconResizeCircle(r,this._resizeCtrlBaseRadius,this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio)}},t.prototype.processMouseMove=function(e,t){var i=\"default\",s=!1;if(this._resizeCtrlIsHover=-1,this._areaIsHover=!1,this._areaIsDragging)this._x=e-this._posDragStartX,this._y=t-this._posDragStartY,this._areaIsHover=!0,i=\"move\",s=!0,this._events.trigger(\"area-move\");else if(this._resizeCtrlIsDragging>-1){var r,o;switch(this._resizeCtrlIsDragging){case 0:r=-1,o=-1,i=\"nwse-resize\";break;case 1:r=1,o=-1,i=\"nesw-resize\";break;case 2:r=-1,o=1,i=\"nesw-resize\";break;case 3:r=1,o=1,i=\"nwse-resize\"}var a,n=(e-this._posResizeStartX)*r,h=(t-this._posResizeStartY)*o;a=n>h?this._posResizeStartSize+h:this._posResizeStartSize+n;var c=this._size;this._size=Math.max(this._minSize,a);var _=(this._size-c)/2;this._x+=_*r,this._y+=_*o,this._resizeCtrlIsHover=this._resizeCtrlIsDragging,s=!0,this._events.trigger(\"area-resize\")}else{var g=this._isCoordWithinResizeCtrl([e,t]);if(g>-1){switch(g){case 0:i=\"nwse-resize\";break;case 1:i=\"nesw-resize\";break;case 2:i=\"nesw-resize\";break;case 3:i=\"nwse-resize\"}this._areaIsHover=!1,this._resizeCtrlIsHover=g,s=!0}else this._isCoordWithinArea([e,t])&&(i=\"move\",this._areaIsHover=!0,s=!0)}return this._dontDragOutside(),angular.element(this._ctx.canvas).css({cursor:i}),s},t.prototype.processMouseDown=function(e,t){var i=this._isCoordWithinResizeCtrl([e,t]);i>-1?(this._areaIsDragging=!1,this._areaIsHover=!1,this._resizeCtrlIsDragging=i,this._resizeCtrlIsHover=i,this._posResizeStartX=e,this._posResizeStartY=t,this._posResizeStartSize=this._size,this._events.trigger(\"area-resize-start\")):this._isCoordWithinArea([e,t])&&(this._areaIsDragging=!0,this._areaIsHover=!0,this._resizeCtrlIsDragging=-1,this._resizeCtrlIsHover=-1,this._posDragStartX=e-this._x,this._posDragStartY=t-this._y,this._events.trigger(\"area-move-start\"))},t.prototype.processMouseUp=function(){this._areaIsDragging&&(this._areaIsDragging=!1,this._events.trigger(\"area-move-end\")),this._resizeCtrlIsDragging>-1&&(this._resizeCtrlIsDragging=-1,this._events.trigger(\"area-resize-end\")),this._areaIsHover=!1,this._resizeCtrlIsHover=-1,this._posDragStartX=0,this._posDragStartY=0},t}]),e.factory(\"cropArea\",[\"cropCanvas\",function(e){var t=function(t,i){this._ctx=t,this._events=i,this._minSize=80,this._cropCanvas=new e(t),this._image=new Image,this._x=0,this._y=0,this._size=200};return t.prototype.getImage=function(){return this._image},t.prototype.setImage=function(e){this._image=e},t.prototype.getX=function(){return this._x},t.prototype.setX=function(e){this._x=e,this._dontDragOutside()},t.prototype.getY=function(){return this._y},t.prototype.setY=function(e){this._y=e,this._dontDragOutside()},t.prototype.getSize=function(){return this._size},t.prototype.setSize=function(e){this._size=Math.max(this._minSize,e),this._dontDragOutside()},t.prototype.getMinSize=function(){return this._minSize},t.prototype.setMinSize=function(e){this._minSize=e,this._size=Math.max(this._minSize,this._size),this._dontDragOutside()},t.prototype._dontDragOutside=function(){var e=this._ctx.canvas.height,t=this._ctx.canvas.width;this._size>t&&(this._size=t),this._size>e&&(this._size=e),this._x<this._size/2&&(this._x=this._size/2),this._x>t-this._size/2&&(this._x=t-this._size/2),this._y<this._size/2&&(this._y=this._size/2),this._y>e-this._size/2&&(this._y=e-this._size/2)},t.prototype._drawArea=function(){},t.prototype.draw=function(){this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea)},t.prototype.processMouseMove=function(){},t.prototype.processMouseDown=function(){},t.prototype.processMouseUp=function(){},t}]),e.factory(\"cropCanvas\",[function(){var e=[[-.5,-2],[-3,-4.5],[-.5,-7],[-7,-7],[-7,-.5],[-4.5,-3],[-2,-.5]],t=[[.5,-2],[3,-4.5],[.5,-7],[7,-7],[7,-.5],[4.5,-3],[2,-.5]],i=[[-.5,2],[-3,4.5],[-.5,7],[-7,7],[-7,.5],[-4.5,3],[-2,.5]],s=[[.5,2],[3,4.5],[.5,7],[7,7],[7,.5],[4.5,3],[2,.5]],r=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]],o=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]],a=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]],n=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]],h={areaOutline:\"#fff\",resizeBoxStroke:\"#fff\",resizeBoxFill:\"#444\",resizeBoxArrowFill:\"#fff\",resizeCircleStroke:\"#fff\",resizeCircleFill:\"#444\",moveIconFill:\"#fff\"};return function(c){var _=function(e,t,i){return[i*e[0]+t[0],i*e[1]+t[1]]},g=function(e,t,i,s){c.save(),c.fillStyle=t,c.beginPath();var r,o=_(e[0],i,s);c.moveTo(o[0],o[1]);for(var a in e)a>0&&(r=_(e[a],i,s),c.lineTo(r[0],r[1]));c.lineTo(o[0],o[1]),c.fill(),c.closePath(),c.restore()};this.drawIconMove=function(e,t){g(r,h.moveIconFill,e,t),g(o,h.moveIconFill,e,t),g(a,h.moveIconFill,e,t),g(n,h.moveIconFill,e,t)},this.drawIconResizeCircle=function(e,t,i){var s=t*i;c.save(),c.strokeStyle=h.resizeCircleStroke,c.lineWidth=2,c.fillStyle=h.resizeCircleFill,c.beginPath(),c.arc(e[0],e[1],s,0,2*Math.PI),c.fill(),c.stroke(),c.closePath(),c.restore()},this.drawIconResizeBoxBase=function(e,t,i){var s=t*i;c.save(),c.strokeStyle=h.resizeBoxStroke,c.lineWidth=2,c.fillStyle=h.resizeBoxFill,c.fillRect(e[0]-s/2,e[1]-s/2,s,s),c.strokeRect(e[0]-s/2,e[1]-s/2,s,s),c.restore()},this.drawIconResizeBoxNESW=function(e,s,r){this.drawIconResizeBoxBase(e,s,r),g(t,h.resizeBoxArrowFill,e,r),g(i,h.resizeBoxArrowFill,e,r)},this.drawIconResizeBoxNWSE=function(t,i,r){this.drawIconResizeBoxBase(t,i,r),g(e,h.resizeBoxArrowFill,t,r),g(s,h.resizeBoxArrowFill,t,r)},this.drawCropArea=function(e,t,i,s){var r=e.width/c.canvas.width,o=e.height/c.canvas.height,a=t[0]-i/2,n=t[1]-i/2;c.save(),c.strokeStyle=h.areaOutline,c.lineWidth=2,c.beginPath(),s(c,t,i),c.stroke(),c.clip(),i>0&&c.drawImage(e,a*r,n*o,i*r,i*o,a,n,i,i),c.beginPath(),s(c,t,i),c.stroke(),c.clip(),c.restore()}}}]),e.factory(\"cropHost\",[\"$document\",\"cropAreaCircle\",\"cropAreaSquare\",function(e,t,i){var s=function(e){var t=e.getBoundingClientRect(),i=document.body,s=document.documentElement,r=window.pageYOffset||s.scrollTop||i.scrollTop,o=window.pageXOffset||s.scrollLeft||i.scrollLeft,a=s.clientTop||i.clientTop||0,n=s.clientLeft||i.clientLeft||0,h=t.top+r-a,c=t.left+o-n;return{top:Math.round(h),left:Math.round(c)}};return function(r,o,a){function n(){h.clearRect(0,0,h.canvas.width,h.canvas.height),null!==c&&(h.drawImage(c,0,0,h.canvas.width,h.canvas.height),h.save(),h.fillStyle=\"rgba(0, 0, 0, 0.65)\",h.fillRect(0,0,h.canvas.width,h.canvas.height),h.restore(),_.draw())}var h=null,c=null,_=null,g=[100,100],u=[300,300],l=200,p=function(){if(null!==c){_.setImage(c);var e=[c.width,c.height],t=c.width/c.height,i=e;i[0]>u[0]?(i[0]=u[0],i[1]=i[0]/t):i[0]<g[0]&&(i[0]=g[0],i[1]=i[0]/t),i[1]>u[1]?(i[1]=u[1],i[0]=i[1]*t):i[1]<g[1]&&(i[1]=g[1],i[0]=i[1]*t),r.prop(\"width\",i[0]).prop(\"height\",i[1]).css({\"margin-left\":-i[0]/2+\"px\",\"margin-top\":-i[1]/2+\"px\"}),_.setX(h.canvas.width/2),_.setY(h.canvas.height/2),_.setSize(Math.min(200,h.canvas.width/2,h.canvas.height/2))}else r.prop(\"width\",0).prop(\"height\",0).css({\"margin-top\":0});n()},z=function(e){if(null!==c){var t,i,r=s(h.canvas);\"touchmove\"===e.type?(t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY):(t=e.pageX,i=e.pageY),_.processMouseMove(t-r.left,i-r.top),n()}},v=function(e){if(e.preventDefault(),e.stopPropagation(),null!==c){var t,i,r=s(h.canvas);\"touchstart\"===e.type?(t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY):(t=e.pageX,i=e.pageY),_.processMouseDown(t-r.left,i-r.top),n()}},f=function(e){if(null!==c){var t,i,r=s(h.canvas);\"touchend\"===e.type?(t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY):(t=e.pageX,i=e.pageY),_.processMouseUp(t-r.left,i-r.top),n()}};this.getResultImageDataURI=function(){var e,t;return t=angular.element(\"<canvas></canvas>\")[0],e=t.getContext(\"2d\"),t.width=l,t.height=l,null!==c&&e.drawImage(c,(_.getX()-_.getSize()/2)*(c.width/h.canvas.width),(_.getY()-_.getSize()/2)*(c.height/h.canvas.height),_.getSize()*(c.width/h.canvas.width),_.getSize()*(c.height/h.canvas.height),0,0,l,l),t.toDataURL()},this.setNewImageSource=function(e){if(c=null,p(),a.trigger(\"image-updated\"),e){var t=new Image;t.onload=function(){a.trigger(\"load-done\"),c=t,p(),a.trigger(\"image-updated\")},t.onerror=function(){a.trigger(\"load-error\")},a.trigger(\"load-start\"),t.src=e}},this.setMaxDimensions=function(e,t){if(u=[e,t],null!==c){var i=h.canvas.width,s=h.canvas.height,o=[c.width,c.height],a=c.width/c.height,l=o;l[0]>u[0]?(l[0]=u[0],l[1]=l[0]/a):l[0]<g[0]&&(l[0]=g[0],l[1]=l[0]/a),l[1]>u[1]?(l[1]=u[1],l[0]=l[1]*a):l[1]<g[1]&&(l[1]=g[1],l[0]=l[1]*a),r.prop(\"width\",l[0]).prop(\"height\",l[1]).css({\"margin-left\":-l[0]/2+\"px\",\"margin-top\":-l[1]/2+\"px\"});var p=h.canvas.width/i,z=h.canvas.height/s,v=Math.min(p,z);_.setX(_.getX()*p),_.setY(_.getY()*z),_.setSize(_.getSize()*v)}else r.prop(\"width\",0).prop(\"height\",0).css({\"margin-top\":0});n()},this.setAreaMinSize=function(e){e=parseInt(e,10),isNaN(e)||(_.setMinSize(e),n())},this.setResultImageSize=function(e){e=parseInt(e,10),isNaN(e)||(l=e)},this.setAreaType=function(e){var s=_.getSize(),r=_.getMinSize(),o=_.getX(),g=_.getY(),u=t;\"square\"===e&&(u=i),_=new u(h,a),_.setMinSize(r),_.setSize(s),_.setX(o),_.setY(g),null!==c&&_.setImage(c),n()},h=r[0].getContext(\"2d\"),_=new t(h,a),e.on(\"mousemove\",z),r.on(\"mousedown\",v),e.on(\"mouseup\",f),e.on(\"touchmove\",z),r.on(\"touchstart\",v),e.on(\"touchend\",f),this.destroy=function(){e.off(\"mousemove\",z),r.off(\"mousedown\",v),e.off(\"mouseup\",z),e.off(\"touchmove\",z),r.off(\"touchstart\",v),e.off(\"touchend\",z),r.remove()}}}]),e.factory(\"cropPubSub\",[function(){return function(){var e={};this.on=function(t,i){return t.split(\" \").forEach(function(t){e[t]||(e[t]=[]),e[t].push(i)}),this},this.trigger=function(t,i){return angular.forEach(e[t],function(e){e.call(null,i)}),this}}}]),e.directive(\"imgCrop\",[\"$timeout\",\"cropHost\",\"cropPubSub\",function(e,t,i){return{restrict:\"E\",scope:{image:\"=\",resultImage:\"=\",changeOnFly:\"=\",areaType:\"@\",areaMinSize:\"=\",resultImageSize:\"=\",onChange:\"&\",onLoadBegin:\"&\",onLoadDone:\"&\",onLoadError:\"&\"},template:\"<canvas></canvas>\",controller:[\"$scope\",function(e){e.events=new i}],link:function(i,s){var r,o=i.events,a=new t(s.find(\"canvas\"),{},o),n=function(e){var t=a.getResultImageDataURI();r!==t&&(r=t,angular.isDefined(e.resultImage)&&(e.resultImage=t),e.onChange({$dataURI:e.resultImage}))},h=function(t){return function(){e(function(){i.$apply(function(e){t(e)})})}};o.on(\"load-start\",h(function(e){e.onLoadBegin({})})).on(\"load-done\",h(function(e){e.onLoadDone({})})).on(\"load-error\",h(function(e){e.onLoadError({})})).on(\"area-move area-resize\",h(function(e){e.changeOnFly&&n(e)})).on(\"area-move-end area-resize-end image-updated\",h(function(e){n(e)})),i.$watch(\"image\",function(){a.setNewImageSource(i.image)}),i.$watch(\"areaType\",function(){a.setAreaType(i.areaType),n(i)}),i.$watch(\"areaMinSize\",function(){a.setAreaMinSize(i.areaMinSize),n(i)}),i.$watch(\"resultImageSize\",function(){a.setResultImageSize(i.resultImageSize),n(i)}),i.$watch(function(){return[s[0].clientWidth,s[0].clientHeight]},function(e){a.setMaxDimensions(e[0],e[1]),n(i)},!0),i.$on(\"$destroy\",function(){a.destroy()})}}}])}();","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/compile/unminified/ng-img-crop.js":"/*!\n * ngImgCrop v0.2.0\n * https://github.com/alexk111/ngImgCrop\n *\n * Copyright (c) 2014 Alex Kaul\n * License: MIT\n *\n * Generated at Tuesday, July 22nd, 2014, 10:37:39 PM\n */\n(function() {\n'use strict';\n\nvar crop = angular.module('ngImgCrop', []);\n\n'use strict';\r\n\r\ncrop.factory('cropAreaCircle', ['cropArea', function(CropArea) {\r\n  var CropAreaCircle = function() {\r\n    CropArea.apply(this, arguments);\r\n\r\n    this._boxResizeBaseSize = 20;\r\n    this._boxResizeNormalRatio = 0.9;\r\n    this._boxResizeHoverRatio = 1.2;\r\n    this._iconMoveNormalRatio = 0.9;\r\n    this._iconMoveHoverRatio = 1.2;\r\n\r\n    this._boxResizeNormalSize = this._boxResizeBaseSize*this._boxResizeNormalRatio;\r\n    this._boxResizeHoverSize = this._boxResizeBaseSize*this._boxResizeHoverRatio;\r\n\r\n    this._posDragStartX=0;\r\n    this._posDragStartY=0;\r\n    this._posResizeStartX=0;\r\n    this._posResizeStartY=0;\r\n    this._posResizeStartSize=0;\r\n\r\n    this._boxResizeIsHover = false;\r\n    this._areaIsHover = false;\r\n    this._boxResizeIsDragging = false;\r\n    this._areaIsDragging = false;\r\n  };\r\n\r\n  CropAreaCircle.prototype = new CropArea();\r\n\r\n  CropAreaCircle.prototype._calcCirclePerimeterCoords=function(angleDegrees) {\r\n    var hSize=this._size/2;\r\n    var angleRadians=angleDegrees * (Math.PI / 180),\r\n        circlePerimeterX=this._x + hSize * Math.cos(angleRadians),\r\n        circlePerimeterY=this._y + hSize * Math.sin(angleRadians);\r\n    return [circlePerimeterX, circlePerimeterY];\r\n  };\r\n\r\n  CropAreaCircle.prototype._calcResizeIconCenterCoords=function() {\r\n    return this._calcCirclePerimeterCoords(-45);\r\n  };\r\n\r\n  CropAreaCircle.prototype._isCoordWithinArea=function(coord) {\r\n    return Math.sqrt((coord[0]-this._x)*(coord[0]-this._x) + (coord[1]-this._y)*(coord[1]-this._y)) < this._size/2;\r\n  };\r\n  CropAreaCircle.prototype._isCoordWithinBoxResize=function(coord) {\r\n    var resizeIconCenterCoords=this._calcResizeIconCenterCoords();\r\n    var hSize=this._boxResizeHoverSize/2;\r\n    return(coord[0] > resizeIconCenterCoords[0] - hSize && coord[0] < resizeIconCenterCoords[0] + hSize &&\r\n           coord[1] > resizeIconCenterCoords[1] - hSize && coord[1] < resizeIconCenterCoords[1] + hSize);\r\n  };\r\n\r\n  CropAreaCircle.prototype._drawArea=function(ctx,centerCoords,size){\r\n    ctx.arc(centerCoords[0],centerCoords[1],size/2,0,2*Math.PI);\r\n  };\r\n\r\n  CropAreaCircle.prototype.draw=function() {\r\n    CropArea.prototype.draw.apply(this, arguments);\r\n\r\n    // draw move icon\r\n    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n    // draw resize cubes\r\n    this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(), this._boxResizeBaseSize, this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio);\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n    var cursor='default';\r\n    var res=false;\r\n\r\n    this._boxResizeIsHover = false;\r\n    this._areaIsHover = false;\r\n\r\n    if (this._areaIsDragging) {\r\n      this._x = mouseCurX - this._posDragStartX;\r\n      this._y = mouseCurY - this._posDragStartY;\r\n      this._areaIsHover = true;\r\n      cursor='move';\r\n      res=true;\r\n      this._events.trigger('area-move');\r\n    } else if (this._boxResizeIsDragging) {\r\n        cursor = 'nesw-resize';\r\n        var iFR, iFX, iFY;\r\n        iFX = mouseCurX - this._posResizeStartX;\r\n        iFY = this._posResizeStartY - mouseCurY;\r\n        if(iFX>iFY) {\r\n          iFR = this._posResizeStartSize + iFY*2;\r\n        } else {\r\n          iFR = this._posResizeStartSize + iFX*2;\r\n        }\r\n\r\n        this._size = Math.max(this._minSize, iFR);\r\n        this._boxResizeIsHover = true;\r\n        res=true;\r\n        this._events.trigger('area-resize');\r\n    } else if (this._isCoordWithinBoxResize([mouseCurX,mouseCurY])) {\r\n        cursor = 'nesw-resize';\r\n        this._areaIsHover = false;\r\n        this._boxResizeIsHover = true;\r\n        res=true;\r\n    } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {\r\n        cursor = 'move';\r\n        this._areaIsHover = true;\r\n        res=true;\r\n    }\r\n\r\n    this._dontDragOutside();\r\n    angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n    return res;\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n    if (this._isCoordWithinBoxResize([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = false;\r\n      this._areaIsHover = false;\r\n      this._boxResizeIsDragging = true;\r\n      this._boxResizeIsHover = true;\r\n      this._posResizeStartX=mouseDownX;\r\n      this._posResizeStartY=mouseDownY;\r\n      this._posResizeStartSize = this._size;\r\n      this._events.trigger('area-resize-start');\r\n    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = true;\r\n      this._areaIsHover = true;\r\n      this._boxResizeIsDragging = false;\r\n      this._boxResizeIsHover = false;\r\n      this._posDragStartX = mouseDownX - this._x;\r\n      this._posDragStartY = mouseDownY - this._y;\r\n      this._events.trigger('area-move-start');\r\n    }\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {\r\n    if(this._areaIsDragging) {\r\n      this._areaIsDragging = false;\r\n      this._events.trigger('area-move-end');\r\n    }\r\n    if(this._boxResizeIsDragging) {\r\n      this._boxResizeIsDragging = false;\r\n      this._events.trigger('area-resize-end');\r\n    }\r\n    this._areaIsHover = false;\r\n    this._boxResizeIsHover = false;\r\n\r\n    this._posDragStartX = 0;\r\n    this._posDragStartY = 0;\r\n  };\r\n\r\n\r\n  return CropAreaCircle;\r\n}]);\r\n\r\n\n\n'use strict';\r\n\r\ncrop.factory('cropAreaSquare', ['cropArea', function(CropArea) {\r\n  var CropAreaSquare = function() {\r\n    CropArea.apply(this, arguments);\r\n\r\n    this._resizeCtrlBaseRadius = 10;\r\n    this._resizeCtrlNormalRatio = 0.75;\r\n    this._resizeCtrlHoverRatio = 1;\r\n    this._iconMoveNormalRatio = 0.9;\r\n    this._iconMoveHoverRatio = 1.2;\r\n\r\n    this._resizeCtrlNormalRadius = this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio;\r\n    this._resizeCtrlHoverRadius = this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio;\r\n\r\n    this._posDragStartX=0;\r\n    this._posDragStartY=0;\r\n    this._posResizeStartX=0;\r\n    this._posResizeStartY=0;\r\n    this._posResizeStartSize=0;\r\n\r\n    this._resizeCtrlIsHover = -1;\r\n    this._areaIsHover = false;\r\n    this._resizeCtrlIsDragging = -1;\r\n    this._areaIsDragging = false;\r\n  };\r\n\r\n  CropAreaSquare.prototype = new CropArea();\r\n\r\n  CropAreaSquare.prototype._calcSquareCorners=function() {\r\n    var hSize=this._size/2;\r\n    return [\r\n      [this._x-hSize, this._y-hSize],\r\n      [this._x+hSize, this._y-hSize],\r\n      [this._x-hSize, this._y+hSize],\r\n      [this._x+hSize, this._y+hSize]\r\n    ];\r\n  };\r\n\r\n  CropAreaSquare.prototype._calcSquareDimensions=function() {\r\n    var hSize=this._size/2;\r\n    return {\r\n      left: this._x-hSize,\r\n      top: this._y-hSize,\r\n      right: this._x+hSize,\r\n      bottom: this._y+hSize\r\n    };\r\n  };\r\n\r\n  CropAreaSquare.prototype._isCoordWithinArea=function(coord) {\r\n    var squareDimensions=this._calcSquareDimensions();\r\n    return (coord[0]>=squareDimensions.left&&coord[0]<=squareDimensions.right&&coord[1]>=squareDimensions.top&&coord[1]<=squareDimensions.bottom);\r\n  };\r\n\r\n  CropAreaSquare.prototype._isCoordWithinResizeCtrl=function(coord) {\r\n    var resizeIconsCenterCoords=this._calcSquareCorners();\r\n    var res=-1;\r\n    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {\r\n      var resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n      if(coord[0] > resizeIconCenterCoords[0] - this._resizeCtrlHoverRadius && coord[0] < resizeIconCenterCoords[0] + this._resizeCtrlHoverRadius &&\r\n         coord[1] > resizeIconCenterCoords[1] - this._resizeCtrlHoverRadius && coord[1] < resizeIconCenterCoords[1] + this._resizeCtrlHoverRadius) {\r\n        res=i;\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  CropAreaSquare.prototype._drawArea=function(ctx,centerCoords,size){\r\n    var hSize=size/2;\r\n    ctx.rect(centerCoords[0]-hSize,centerCoords[1]-hSize,size,size);\r\n  };\r\n\r\n  CropAreaSquare.prototype.draw=function() {\r\n    CropArea.prototype.draw.apply(this, arguments);\r\n\r\n    // draw move icon\r\n    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n    // draw resize cubes\r\n    var resizeIconsCenterCoords=this._calcSquareCorners();\r\n    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {\r\n      var resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n      this._cropCanvas.drawIconResizeCircle(resizeIconCenterCoords, this._resizeCtrlBaseRadius, this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio);\r\n    }\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n    var cursor='default';\r\n    var res=false;\r\n\r\n    this._resizeCtrlIsHover = -1;\r\n    this._areaIsHover = false;\r\n\r\n    if (this._areaIsDragging) {\r\n      this._x = mouseCurX - this._posDragStartX;\r\n      this._y = mouseCurY - this._posDragStartY;\r\n      this._areaIsHover = true;\r\n      cursor='move';\r\n      res=true;\r\n      this._events.trigger('area-move');\r\n    } else if (this._resizeCtrlIsDragging>-1) {\r\n      var xMulti, yMulti;\r\n      switch(this._resizeCtrlIsDragging) {\r\n        case 0: // Top Left\r\n          xMulti=-1;\r\n          yMulti=-1;\r\n          cursor = 'nwse-resize';\r\n          break;\r\n        case 1: // Top Right\r\n          xMulti=1;\r\n          yMulti=-1;\r\n          cursor = 'nesw-resize';\r\n          break;\r\n        case 2: // Bottom Left\r\n          xMulti=-1;\r\n          yMulti=1;\r\n          cursor = 'nesw-resize';\r\n          break;\r\n        case 3: // Bottom Right\r\n          xMulti=1;\r\n          yMulti=1;\r\n          cursor = 'nwse-resize';\r\n          break;\r\n      }\r\n      var iFX = (mouseCurX - this._posResizeStartX)*xMulti;\r\n      var iFY = (mouseCurY - this._posResizeStartY)*yMulti;\r\n      var iFR;\r\n      if(iFX>iFY) {\r\n        iFR = this._posResizeStartSize + iFY;\r\n      } else {\r\n        iFR = this._posResizeStartSize + iFX;\r\n      }\r\n      var wasSize=this._size;\r\n      this._size = Math.max(this._minSize, iFR);\r\n      var posModifier=(this._size-wasSize)/2;\r\n      this._x+=posModifier*xMulti;\r\n      this._y+=posModifier*yMulti;\r\n      this._resizeCtrlIsHover = this._resizeCtrlIsDragging;\r\n      res=true;\r\n      this._events.trigger('area-resize');\r\n    } else {\r\n      var hoveredResizeBox=this._isCoordWithinResizeCtrl([mouseCurX,mouseCurY]);\r\n      if (hoveredResizeBox>-1) {\r\n        switch(hoveredResizeBox) {\r\n          case 0:\r\n            cursor = 'nwse-resize';\r\n            break;\r\n          case 1:\r\n            cursor = 'nesw-resize';\r\n            break;\r\n          case 2:\r\n            cursor = 'nesw-resize';\r\n            break;\r\n          case 3:\r\n            cursor = 'nwse-resize';\r\n            break;\r\n        }\r\n        this._areaIsHover = false;\r\n        this._resizeCtrlIsHover = hoveredResizeBox;\r\n        res=true;\r\n      } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {\r\n        cursor = 'move';\r\n        this._areaIsHover = true;\r\n        res=true;\r\n      }\r\n    }\r\n\r\n    this._dontDragOutside();\r\n    angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n    return res;\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n    var isWithinResizeCtrl=this._isCoordWithinResizeCtrl([mouseDownX,mouseDownY]);\r\n    if (isWithinResizeCtrl>-1) {\r\n      this._areaIsDragging = false;\r\n      this._areaIsHover = false;\r\n      this._resizeCtrlIsDragging = isWithinResizeCtrl;\r\n      this._resizeCtrlIsHover = isWithinResizeCtrl;\r\n      this._posResizeStartX=mouseDownX;\r\n      this._posResizeStartY=mouseDownY;\r\n      this._posResizeStartSize = this._size;\r\n      this._events.trigger('area-resize-start');\r\n    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = true;\r\n      this._areaIsHover = true;\r\n      this._resizeCtrlIsDragging = -1;\r\n      this._resizeCtrlIsHover = -1;\r\n      this._posDragStartX = mouseDownX - this._x;\r\n      this._posDragStartY = mouseDownY - this._y;\r\n      this._events.trigger('area-move-start');\r\n    }\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {\r\n    if(this._areaIsDragging) {\r\n      this._areaIsDragging = false;\r\n      this._events.trigger('area-move-end');\r\n    }\r\n    if(this._resizeCtrlIsDragging>-1) {\r\n      this._resizeCtrlIsDragging = -1;\r\n      this._events.trigger('area-resize-end');\r\n    }\r\n    this._areaIsHover = false;\r\n    this._resizeCtrlIsHover = -1;\r\n\r\n    this._posDragStartX = 0;\r\n    this._posDragStartY = 0;\r\n  };\r\n\r\n\r\n  return CropAreaSquare;\r\n}]);\n\n'use strict';\r\n\r\ncrop.factory('cropArea', ['cropCanvas', function(CropCanvas) {\r\n  var CropArea = function(ctx, events) {\r\n    this._ctx=ctx;\r\n    this._events=events;\r\n\r\n    this._minSize=80;\r\n\r\n    this._cropCanvas=new CropCanvas(ctx);\r\n\r\n    this._image=new Image();\r\n    this._x = 0;\r\n    this._y = 0;\r\n    this._size = 200;\r\n  };\r\n\r\n  /* GETTERS/SETTERS */\r\n\r\n  CropArea.prototype.getImage = function () {\r\n    return this._image;\r\n  };\r\n  CropArea.prototype.setImage = function (image) {\r\n    this._image = image;\r\n  };\r\n\r\n  CropArea.prototype.getX = function () {\r\n    return this._x;\r\n  };\r\n  CropArea.prototype.setX = function (x) {\r\n    this._x = x;\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getY = function () {\r\n    return this._y;\r\n  };\r\n  CropArea.prototype.setY = function (y) {\r\n    this._y = y;\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getSize = function () {\r\n    return this._size;\r\n  };\r\n  CropArea.prototype.setSize = function (size) {\r\n    this._size = Math.max(this._minSize, size);\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getMinSize = function () {\r\n    return this._minSize;\r\n  };\r\n  CropArea.prototype.setMinSize = function (size) {\r\n    this._minSize = size;\r\n    this._size = Math.max(this._minSize, this._size);\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  /* FUNCTIONS */\r\n  CropArea.prototype._dontDragOutside=function() {\r\n    var h=this._ctx.canvas.height,\r\n        w=this._ctx.canvas.width;\r\n    if(this._size>w) { this._size=w; }\r\n    if(this._size>h) { this._size=h; }\r\n    if(this._x<this._size/2) { this._x=this._size/2; }\r\n    if(this._x>w-this._size/2) { this._x=w-this._size/2; }\r\n    if(this._y<this._size/2) { this._y=this._size/2; }\r\n    if(this._y>h-this._size/2) { this._y=h-this._size/2; }\r\n  };\r\n\r\n  CropArea.prototype._drawArea=function() {};\r\n\r\n  CropArea.prototype.draw=function() {\r\n    // draw crop area\r\n    this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea);\r\n  };\r\n\r\n  CropArea.prototype.processMouseMove=function() {};\r\n\r\n  CropArea.prototype.processMouseDown=function() {};\r\n\r\n  CropArea.prototype.processMouseUp=function() {};\r\n\r\n  return CropArea;\r\n}]);\n\n'use strict';\r\n\r\ncrop.factory('cropCanvas', [function() {\r\n  // Shape = Array of [x,y]; [0, 0] - center\r\n  var shapeArrowNW=[[-0.5,-2],[-3,-4.5],[-0.5,-7],[-7,-7],[-7,-0.5],[-4.5,-3],[-2,-0.5]];\r\n  var shapeArrowNE=[[0.5,-2],[3,-4.5],[0.5,-7],[7,-7],[7,-0.5],[4.5,-3],[2,-0.5]];\r\n  var shapeArrowSW=[[-0.5,2],[-3,4.5],[-0.5,7],[-7,7],[-7,0.5],[-4.5,3],[-2,0.5]];\r\n  var shapeArrowSE=[[0.5,2],[3,4.5],[0.5,7],[7,7],[7,0.5],[4.5,3],[2,0.5]];\r\n  var shapeArrowN=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]];\r\n  var shapeArrowW=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]];\r\n  var shapeArrowS=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]];\r\n  var shapeArrowE=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]];\r\n\r\n  // Colors\r\n  var colors={\r\n    areaOutline: '#fff',\r\n    resizeBoxStroke: '#fff',\r\n    resizeBoxFill: '#444',\r\n    resizeBoxArrowFill: '#fff',\r\n    resizeCircleStroke: '#fff',\r\n    resizeCircleFill: '#444',\r\n    moveIconFill: '#fff'\r\n  };\r\n\r\n  return function(ctx){\r\n\r\n    /* Base functions */\r\n\r\n    // Calculate Point\r\n    var calcPoint=function(point,offset,scale) {\r\n        return [scale*point[0]+offset[0], scale*point[1]+offset[1]];\r\n    };\r\n\r\n    // Draw Filled Polygon\r\n    var drawFilledPolygon=function(shape,fillStyle,centerCoords,scale) {\r\n        ctx.save();\r\n        ctx.fillStyle = fillStyle;\r\n        ctx.beginPath();\r\n        var pc, pc0=calcPoint(shape[0],centerCoords,scale);\r\n        ctx.moveTo(pc0[0],pc0[1]);\r\n\r\n        for(var p in shape) {\r\n            if (p > 0) {\r\n                pc=calcPoint(shape[p],centerCoords,scale);\r\n                ctx.lineTo(pc[0],pc[1]);\r\n            }\r\n        }\r\n\r\n        ctx.lineTo(pc0[0],pc0[1]);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n    };\r\n\r\n\r\n    /* Icons */\r\n\r\n    this.drawIconMove=function(centerCoords, scale) {\r\n      drawFilledPolygon(shapeArrowN, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowW, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowS, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowE, colors.moveIconFill, centerCoords, scale);\r\n    };\r\n\r\n    this.drawIconResizeCircle=function(centerCoords, circleRadius, scale) {\r\n      var scaledCircleRadius=circleRadius*scale;\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.resizeCircleStroke;\r\n      ctx.lineWidth = 2;\r\n      ctx.fillStyle = colors.resizeCircleFill;\r\n      ctx.beginPath();\r\n      ctx.arc(centerCoords[0],centerCoords[1],scaledCircleRadius,0,2*Math.PI);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n      ctx.restore();\r\n    };\r\n\r\n    this.drawIconResizeBoxBase=function(centerCoords, boxSize, scale) {\r\n      var scaledBoxSize=boxSize*scale;\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.resizeBoxStroke;\r\n      ctx.lineWidth = 2;\r\n      ctx.fillStyle = colors.resizeBoxFill;\r\n      ctx.fillRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n      ctx.strokeRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n      ctx.restore();\r\n    };\r\n    this.drawIconResizeBoxNESW=function(centerCoords, boxSize, scale) {\r\n      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n      drawFilledPolygon(shapeArrowNE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowSW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n    };\r\n    this.drawIconResizeBoxNWSE=function(centerCoords, boxSize, scale) {\r\n      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n      drawFilledPolygon(shapeArrowNW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowSE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n    };\r\n\r\n    /* Crop Area */\r\n\r\n    this.drawCropArea=function(image, centerCoords, size, fnDrawClipPath) {\r\n      var xRatio=image.width/ctx.canvas.width,\r\n          yRatio=image.height/ctx.canvas.height,\r\n          xLeft=centerCoords[0]-size/2,\r\n          yTop=centerCoords[1]-size/2;\r\n\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.areaOutline;\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      fnDrawClipPath(ctx, centerCoords, size);\r\n      ctx.stroke();\r\n      ctx.clip();\r\n\r\n      // draw part of original image\r\n      if (size > 0) {\r\n          ctx.drawImage(image, xLeft*xRatio, yTop*yRatio, size*xRatio, size*yRatio, xLeft, yTop, size, size);\r\n      }\r\n\r\n      ctx.beginPath();\r\n      fnDrawClipPath(ctx, centerCoords, size);\r\n      ctx.stroke();\r\n      ctx.clip();\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n  };\r\n}]);\n\n'use strict';\r\n\r\ncrop.factory('cropHost', ['$document', 'cropAreaCircle', 'cropAreaSquare', function($document, CropAreaCircle, CropAreaSquare) {\r\n  /* STATIC FUNCTIONS */\r\n\r\n  // Get Element's Offset\r\n  var getElementOffset=function(elem) {\r\n      var box = elem.getBoundingClientRect();\r\n\r\n      var body = document.body;\r\n      var docElem = document.documentElement;\r\n\r\n      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\r\n      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\r\n\r\n      var clientTop = docElem.clientTop || body.clientTop || 0;\r\n      var clientLeft = docElem.clientLeft || body.clientLeft || 0;\r\n\r\n      var top  = box.top +  scrollTop - clientTop;\r\n      var left = box.left + scrollLeft - clientLeft;\r\n\r\n      return { top: Math.round(top), left: Math.round(left) };\r\n  };\r\n\r\n  return function(elCanvas, opts, events){\r\n    /* PRIVATE VARIABLES */\r\n\r\n    // Object Pointers\r\n    var ctx=null,\r\n        image=null,\r\n        theArea=null;\r\n\r\n    // Dimensions\r\n    var minCanvasDims=[100,100],\r\n        maxCanvasDims=[300,300];\r\n\r\n    // Result Image size\r\n    var resImgSize=200;\r\n\r\n    /* PRIVATE FUNCTIONS */\r\n\r\n    // Draw Scene\r\n    function drawScene() {\r\n      // clear canvas\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n      if(image!==null) {\r\n        // draw source image\r\n        ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        ctx.save();\r\n\r\n        // and make it darker\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        ctx.restore();\r\n\r\n        // draw Area\r\n        theArea.draw();\r\n      }\r\n    }\r\n\r\n    // Resets CropHost\r\n    var resetCropHost=function() {\r\n      if(image!==null) {\r\n        theArea.setImage(image);\r\n        var imageDims=[image.width, image.height],\r\n            imageRatio=image.width/image.height,\r\n            canvasDims=imageDims;\r\n\r\n        if(canvasDims[0]>maxCanvasDims[0]) {\r\n          canvasDims[0]=maxCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        } else if(canvasDims[0]<minCanvasDims[0]) {\r\n          canvasDims[0]=minCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        }\r\n        if(canvasDims[1]>maxCanvasDims[1]) {\r\n          canvasDims[1]=maxCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        } else if(canvasDims[1]<minCanvasDims[1]) {\r\n          canvasDims[1]=minCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        }\r\n        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n        theArea.setX(ctx.canvas.width/2);\r\n        theArea.setY(ctx.canvas.height/2);\r\n        theArea.setSize(Math.min(200, ctx.canvas.width/2, ctx.canvas.height/2));\r\n      } else {\r\n        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});\r\n      }\r\n\r\n      drawScene();\r\n    };\r\n\r\n    var onMouseMove=function(e) {\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchmove') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseMove(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    var onMouseDown=function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchstart') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseDown(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    var onMouseUp=function(e) {\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchend') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseUp(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n\r\n    this.getResultImageDataURI=function() {\r\n      var temp_ctx, temp_canvas;\r\n      temp_canvas = angular.element('<canvas></canvas>')[0];\r\n      temp_ctx = temp_canvas.getContext('2d');\r\n      temp_canvas.width = resImgSize;\r\n      temp_canvas.height = resImgSize;\r\n      if(image!==null){\r\n        temp_ctx.drawImage(image, (theArea.getX()-theArea.getSize()/2)*(image.width/ctx.canvas.width), (theArea.getY()-theArea.getSize()/2)*(image.height/ctx.canvas.height), theArea.getSize()*(image.width/ctx.canvas.width), theArea.getSize()*(image.height/ctx.canvas.height), 0, 0, resImgSize, resImgSize);\r\n      }\r\n      return temp_canvas.toDataURL();\r\n    };\r\n\r\n    this.setNewImageSource=function(imageSource) {\r\n      image=null;\r\n      resetCropHost();\r\n      events.trigger('image-updated');\r\n      if(!!imageSource) {\r\n        var newImage = new Image();\r\n        newImage.onload = function(){\r\n          events.trigger('load-done');\r\n          image=newImage;\r\n          resetCropHost();\r\n          events.trigger('image-updated');\r\n        };\r\n        newImage.onerror=function() {\r\n          events.trigger('load-error');\r\n        };\r\n        events.trigger('load-start');\r\n        newImage.src=imageSource;\r\n      }\r\n    };\r\n\r\n    this.setMaxDimensions=function(width, height) {\r\n      maxCanvasDims=[width,height];\r\n\r\n      if(image!==null) {\r\n        var curWidth=ctx.canvas.width,\r\n            curHeight=ctx.canvas.height;\r\n\r\n        var imageDims=[image.width, image.height],\r\n            imageRatio=image.width/image.height,\r\n            canvasDims=imageDims;\r\n\r\n        if(canvasDims[0]>maxCanvasDims[0]) {\r\n          canvasDims[0]=maxCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        } else if(canvasDims[0]<minCanvasDims[0]) {\r\n          canvasDims[0]=minCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        }\r\n        if(canvasDims[1]>maxCanvasDims[1]) {\r\n          canvasDims[1]=maxCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        } else if(canvasDims[1]<minCanvasDims[1]) {\r\n          canvasDims[1]=minCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        }\r\n        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n        var ratioNewCurWidth=ctx.canvas.width/curWidth,\r\n            ratioNewCurHeight=ctx.canvas.height/curHeight,\r\n            ratioMin=Math.min(ratioNewCurWidth, ratioNewCurHeight);\r\n\r\n        theArea.setX(theArea.getX()*ratioNewCurWidth);\r\n        theArea.setY(theArea.getY()*ratioNewCurHeight);\r\n        theArea.setSize(theArea.getSize()*ratioMin);\r\n      } else {\r\n        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});\r\n      }\r\n\r\n      drawScene();\r\n\r\n    };\r\n\r\n    this.setAreaMinSize=function(size) {\r\n      size=parseInt(size,10);\r\n      if(!isNaN(size)) {\r\n        theArea.setMinSize(size);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    this.setResultImageSize=function(size) {\r\n      size=parseInt(size,10);\r\n      if(!isNaN(size)) {\r\n        resImgSize=size;\r\n      }\r\n    };\r\n\r\n    this.setAreaType=function(type) {\r\n      var curSize=theArea.getSize(),\r\n          curMinSize=theArea.getMinSize(),\r\n          curX=theArea.getX(),\r\n          curY=theArea.getY();\r\n\r\n      var AreaClass=CropAreaCircle;\r\n      if(type==='square') {\r\n        AreaClass=CropAreaSquare;\r\n      }\r\n      theArea = new AreaClass(ctx, events);\r\n      theArea.setMinSize(curMinSize);\r\n      theArea.setSize(curSize);\r\n      theArea.setX(curX);\r\n      theArea.setY(curY);\r\n\r\n      // resetCropHost();\r\n      if(image!==null) {\r\n        theArea.setImage(image);\r\n      }\r\n\r\n      drawScene();\r\n    };\r\n\r\n    /* Life Cycle begins */\r\n\r\n    // Init Context var\r\n    ctx = elCanvas[0].getContext('2d');\r\n\r\n    // Init CropArea\r\n    theArea = new CropAreaCircle(ctx, events);\r\n\r\n    // Init Mouse Event Listeners\r\n    $document.on('mousemove',onMouseMove);\r\n    elCanvas.on('mousedown',onMouseDown);\r\n    $document.on('mouseup',onMouseUp);\r\n\r\n    // Init Touch Event Listeners\r\n    $document.on('touchmove',onMouseMove);\r\n    elCanvas.on('touchstart',onMouseDown);\r\n    $document.on('touchend',onMouseUp);\r\n\r\n    // CropHost Destructor\r\n    this.destroy=function() {\r\n      $document.off('mousemove',onMouseMove);\r\n      elCanvas.off('mousedown',onMouseDown);\r\n      $document.off('mouseup',onMouseMove);\r\n\r\n      $document.off('touchmove',onMouseMove);\r\n      elCanvas.off('touchstart',onMouseDown);\r\n      $document.off('touchend',onMouseMove);\r\n\r\n      elCanvas.remove();\r\n    };\r\n  };\r\n\r\n}]);\r\n\n\n'use strict';\r\n\r\ncrop.factory('cropPubSub', [function() {\r\n  return function() {\r\n    var events = {};\r\n    // Subscribe\r\n    this.on = function(names, handler) {\r\n      names.split(' ').forEach(function(name) {\r\n        if (!events[name]) {\r\n          events[name] = [];\r\n        }\r\n        events[name].push(handler);\r\n      });\r\n      return this;\r\n    };\r\n    // Publish\r\n    this.trigger = function(name, args) {\r\n      angular.forEach(events[name], function(handler) {\r\n        handler.call(null, args);\r\n      });\r\n      return this;\r\n    };\r\n  };\r\n}]);\n\ncrop.directive('imgCrop', ['$timeout', 'cropHost', 'cropPubSub', function($timeout, CropHost, CropPubSub) {\n  return {\n    restrict: 'E',\n    scope: {\n      image: '=',\n      resultImage: '=',\n\n      changeOnFly: '=',\n      areaType: '@',\n      areaMinSize: '=',\n      resultImageSize: '=',\n\n      onChange: '&',\n      onLoadBegin: '&',\n      onLoadDone: '&',\n      onLoadError: '&'\n    },\n    template: '<canvas></canvas>',\n    controller: function($scope/*, $attrs, $element*/) {\n      $scope.events = new CropPubSub();\n    },\n    link: function(scope, element/*, attrs*/) {\n      // Init Events Manager\n      var events = scope.events;\n\n      // Init Crop Host\n      var cropHost=new CropHost(element.find('canvas'), {}, events);\n\n      // Store Result Image to check if it's changed\n      var storedResultImage;\n\n      var updateResultImage=function(scope) {\n        var resultImage=cropHost.getResultImageDataURI();\n        if(storedResultImage!==resultImage) {\n          storedResultImage=resultImage;\n          if(angular.isDefined(scope.resultImage)) {\n            scope.resultImage=resultImage;\n          }\n          scope.onChange({$dataURI: scope.resultImage});\n        }\n      };\n\n      // Wrapper to safely exec functions within $apply on a running $digest cycle\n      var fnSafeApply=function(fn) {\n        return function(){\n          $timeout(function(){\n            scope.$apply(function(scope){\n              fn(scope);\n            });\n          });\n        };\n      };\n\n      // Setup CropHost Event Handlers\n      events\n        .on('load-start', fnSafeApply(function(scope){\n          scope.onLoadBegin({});\n        }))\n        .on('load-done', fnSafeApply(function(scope){\n          scope.onLoadDone({});\n        }))\n        .on('load-error', fnSafeApply(function(scope){\n          scope.onLoadError({});\n        }))\n        .on('area-move area-resize', fnSafeApply(function(scope){\n          if(!!scope.changeOnFly) {\n            updateResultImage(scope);\n          }\n        }))\n        .on('area-move-end area-resize-end image-updated', fnSafeApply(function(scope){\n          updateResultImage(scope);\n        }));\n\n      // Sync CropHost with Directive's options\n      scope.$watch('image',function(){\n        cropHost.setNewImageSource(scope.image);\n      });\n      scope.$watch('areaType',function(){\n        cropHost.setAreaType(scope.areaType);\n        updateResultImage(scope);\n      });\n      scope.$watch('areaMinSize',function(){\n        cropHost.setAreaMinSize(scope.areaMinSize);\n        updateResultImage(scope);\n      });\n      scope.$watch('resultImageSize',function(){\n        cropHost.setResultImageSize(scope.resultImageSize);\n        updateResultImage(scope);\n      });\n\n      // Update CropHost dimensions when the directive element is resized\n      scope.$watch(\n        function () {\n          return [element[0].clientWidth, element[0].clientHeight];\n        },\n        function (value) {\n          cropHost.setMaxDimensions(value[0],value[1]);\n          updateResultImage(scope);\n        },\n        true\n      );\n\n      // Destroy CropHost Instance when the directive is destroying\n      scope.$on('$destroy', function(){\n          cropHost.destroy();\n      });\n    }\n  };\n}]);\n}());","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/init.js":"'use strict';\n\nvar crop = angular.module('ngImgCrop', []);","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/ng-img-crop.js":"'use strict';\n\ncrop.directive('imgCrop', ['$timeout', 'cropHost', 'cropPubSub', function($timeout, CropHost, CropPubSub) {\n  return {\n    restrict: 'E',\n    scope: {\n      image: '=',\n      resultImage: '=',\n\n      changeOnFly: '=',\n      areaType: '@',\n      areaMinSize: '=',\n      resultImageSize: '=',\n\n      onChange: '&',\n      onLoadBegin: '&',\n      onLoadDone: '&',\n      onLoadError: '&'\n    },\n    template: '<canvas></canvas>',\n    controller: function($scope/*, $attrs, $element*/) {\n      $scope.events = new CropPubSub();\n    },\n    link: function(scope, element/*, attrs*/) {\n      // Init Events Manager\n      var events = scope.events;\n\n      // Init Crop Host\n      var cropHost=new CropHost(element.find('canvas'), {}, events);\n\n      // Store Result Image to check if it's changed\n      var storedResultImage;\n\n      var updateResultImage=function(scope) {\n        var resultImage=cropHost.getResultImageDataURI();\n        if(storedResultImage!==resultImage) {\n          storedResultImage=resultImage;\n          if(angular.isDefined(scope.resultImage)) {\n            scope.resultImage=resultImage;\n          }\n          scope.onChange({$dataURI: scope.resultImage});\n        }\n      };\n\n      // Wrapper to safely exec functions within $apply on a running $digest cycle\n      var fnSafeApply=function(fn) {\n        return function(){\n          $timeout(function(){\n            scope.$apply(function(scope){\n              fn(scope);\n            });\n          });\n        };\n      };\n\n      // Setup CropHost Event Handlers\n      events\n        .on('load-start', fnSafeApply(function(scope){\n          scope.onLoadBegin({});\n        }))\n        .on('load-done', fnSafeApply(function(scope){\n          scope.onLoadDone({});\n        }))\n        .on('load-error', fnSafeApply(function(scope){\n          scope.onLoadError({});\n        }))\n        .on('area-move area-resize', fnSafeApply(function(scope){\n          if(!!scope.changeOnFly) {\n            updateResultImage(scope);\n          }\n        }))\n        .on('area-move-end area-resize-end image-updated', fnSafeApply(function(scope){\n          updateResultImage(scope);\n        }));\n\n      // Sync CropHost with Directive's options\n      scope.$watch('image',function(){\n        cropHost.setNewImageSource(scope.image);\n      });\n      scope.$watch('areaType',function(){\n        cropHost.setAreaType(scope.areaType);\n        updateResultImage(scope);\n      });\n      scope.$watch('areaMinSize',function(){\n        cropHost.setAreaMinSize(scope.areaMinSize);\n        updateResultImage(scope);\n      });\n      scope.$watch('resultImageSize',function(){\n        cropHost.setResultImageSize(scope.resultImageSize);\n        updateResultImage(scope);\n      });\n\n      // Update CropHost dimensions when the directive element is resized\n      scope.$watch(\n        function () {\n          return [element[0].clientWidth, element[0].clientHeight];\n        },\n        function (value) {\n          cropHost.setMaxDimensions(value[0],value[1]);\n          updateResultImage(scope);\n        },\n        true\n      );\n\n      // Destroy CropHost Instance when the directive is destroying\n      scope.$on('$destroy', function(){\n          cropHost.destroy();\n      });\n    }\n  };\n}]);","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/classes/crop-area-circle.js":"'use strict';\r\n\r\ncrop.factory('cropAreaCircle', ['cropArea', function(CropArea) {\r\n  var CropAreaCircle = function() {\r\n    CropArea.apply(this, arguments);\r\n\r\n    this._boxResizeBaseSize = 20;\r\n    this._boxResizeNormalRatio = 0.9;\r\n    this._boxResizeHoverRatio = 1.2;\r\n    this._iconMoveNormalRatio = 0.9;\r\n    this._iconMoveHoverRatio = 1.2;\r\n\r\n    this._boxResizeNormalSize = this._boxResizeBaseSize*this._boxResizeNormalRatio;\r\n    this._boxResizeHoverSize = this._boxResizeBaseSize*this._boxResizeHoverRatio;\r\n\r\n    this._posDragStartX=0;\r\n    this._posDragStartY=0;\r\n    this._posResizeStartX=0;\r\n    this._posResizeStartY=0;\r\n    this._posResizeStartSize=0;\r\n\r\n    this._boxResizeIsHover = false;\r\n    this._areaIsHover = false;\r\n    this._boxResizeIsDragging = false;\r\n    this._areaIsDragging = false;\r\n  };\r\n\r\n  CropAreaCircle.prototype = new CropArea();\r\n\r\n  CropAreaCircle.prototype._calcCirclePerimeterCoords=function(angleDegrees) {\r\n    var hSize=this._size/2;\r\n    var angleRadians=angleDegrees * (Math.PI / 180),\r\n        circlePerimeterX=this._x + hSize * Math.cos(angleRadians),\r\n        circlePerimeterY=this._y + hSize * Math.sin(angleRadians);\r\n    return [circlePerimeterX, circlePerimeterY];\r\n  };\r\n\r\n  CropAreaCircle.prototype._calcResizeIconCenterCoords=function() {\r\n    return this._calcCirclePerimeterCoords(-45);\r\n  };\r\n\r\n  CropAreaCircle.prototype._isCoordWithinArea=function(coord) {\r\n    return Math.sqrt((coord[0]-this._x)*(coord[0]-this._x) + (coord[1]-this._y)*(coord[1]-this._y)) < this._size/2;\r\n  };\r\n  CropAreaCircle.prototype._isCoordWithinBoxResize=function(coord) {\r\n    var resizeIconCenterCoords=this._calcResizeIconCenterCoords();\r\n    var hSize=this._boxResizeHoverSize/2;\r\n    return(coord[0] > resizeIconCenterCoords[0] - hSize && coord[0] < resizeIconCenterCoords[0] + hSize &&\r\n           coord[1] > resizeIconCenterCoords[1] - hSize && coord[1] < resizeIconCenterCoords[1] + hSize);\r\n  };\r\n\r\n  CropAreaCircle.prototype._drawArea=function(ctx,centerCoords,size){\r\n    ctx.arc(centerCoords[0],centerCoords[1],size/2,0,2*Math.PI);\r\n  };\r\n\r\n  CropAreaCircle.prototype.draw=function() {\r\n    CropArea.prototype.draw.apply(this, arguments);\r\n\r\n    // draw move icon\r\n    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n    // draw resize cubes\r\n    this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(), this._boxResizeBaseSize, this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio);\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n    var cursor='default';\r\n    var res=false;\r\n\r\n    this._boxResizeIsHover = false;\r\n    this._areaIsHover = false;\r\n\r\n    if (this._areaIsDragging) {\r\n      this._x = mouseCurX - this._posDragStartX;\r\n      this._y = mouseCurY - this._posDragStartY;\r\n      this._areaIsHover = true;\r\n      cursor='move';\r\n      res=true;\r\n      this._events.trigger('area-move');\r\n    } else if (this._boxResizeIsDragging) {\r\n        cursor = 'nesw-resize';\r\n        var iFR, iFX, iFY;\r\n        iFX = mouseCurX - this._posResizeStartX;\r\n        iFY = this._posResizeStartY - mouseCurY;\r\n        if(iFX>iFY) {\r\n          iFR = this._posResizeStartSize + iFY*2;\r\n        } else {\r\n          iFR = this._posResizeStartSize + iFX*2;\r\n        }\r\n\r\n        this._size = Math.max(this._minSize, iFR);\r\n        this._boxResizeIsHover = true;\r\n        res=true;\r\n        this._events.trigger('area-resize');\r\n    } else if (this._isCoordWithinBoxResize([mouseCurX,mouseCurY])) {\r\n        cursor = 'nesw-resize';\r\n        this._areaIsHover = false;\r\n        this._boxResizeIsHover = true;\r\n        res=true;\r\n    } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {\r\n        cursor = 'move';\r\n        this._areaIsHover = true;\r\n        res=true;\r\n    }\r\n\r\n    this._dontDragOutside();\r\n    angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n    return res;\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n    if (this._isCoordWithinBoxResize([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = false;\r\n      this._areaIsHover = false;\r\n      this._boxResizeIsDragging = true;\r\n      this._boxResizeIsHover = true;\r\n      this._posResizeStartX=mouseDownX;\r\n      this._posResizeStartY=mouseDownY;\r\n      this._posResizeStartSize = this._size;\r\n      this._events.trigger('area-resize-start');\r\n    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = true;\r\n      this._areaIsHover = true;\r\n      this._boxResizeIsDragging = false;\r\n      this._boxResizeIsHover = false;\r\n      this._posDragStartX = mouseDownX - this._x;\r\n      this._posDragStartY = mouseDownY - this._y;\r\n      this._events.trigger('area-move-start');\r\n    }\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {\r\n    if(this._areaIsDragging) {\r\n      this._areaIsDragging = false;\r\n      this._events.trigger('area-move-end');\r\n    }\r\n    if(this._boxResizeIsDragging) {\r\n      this._boxResizeIsDragging = false;\r\n      this._events.trigger('area-resize-end');\r\n    }\r\n    this._areaIsHover = false;\r\n    this._boxResizeIsHover = false;\r\n\r\n    this._posDragStartX = 0;\r\n    this._posDragStartY = 0;\r\n  };\r\n\r\n\r\n  return CropAreaCircle;\r\n}]);\r\n\r\n","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/classes/crop-area.js":"'use strict';\r\n\r\ncrop.factory('cropArea', ['cropCanvas', function(CropCanvas) {\r\n  var CropArea = function(ctx, events) {\r\n    this._ctx=ctx;\r\n    this._events=events;\r\n\r\n    this._minSize=80;\r\n\r\n    this._cropCanvas=new CropCanvas(ctx);\r\n\r\n    this._image=new Image();\r\n    this._x = 0;\r\n    this._y = 0;\r\n    this._size = 200;\r\n  };\r\n\r\n  /* GETTERS/SETTERS */\r\n\r\n  CropArea.prototype.getImage = function () {\r\n    return this._image;\r\n  };\r\n  CropArea.prototype.setImage = function (image) {\r\n    this._image = image;\r\n  };\r\n\r\n  CropArea.prototype.getX = function () {\r\n    return this._x;\r\n  };\r\n  CropArea.prototype.setX = function (x) {\r\n    this._x = x;\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getY = function () {\r\n    return this._y;\r\n  };\r\n  CropArea.prototype.setY = function (y) {\r\n    this._y = y;\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getSize = function () {\r\n    return this._size;\r\n  };\r\n  CropArea.prototype.setSize = function (size) {\r\n    this._size = Math.max(this._minSize, size);\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getMinSize = function () {\r\n    return this._minSize;\r\n  };\r\n  CropArea.prototype.setMinSize = function (size) {\r\n    this._minSize = size;\r\n    this._size = Math.max(this._minSize, this._size);\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  /* FUNCTIONS */\r\n  CropArea.prototype._dontDragOutside=function() {\r\n    var h=this._ctx.canvas.height,\r\n        w=this._ctx.canvas.width;\r\n    if(this._size>w) { this._size=w; }\r\n    if(this._size>h) { this._size=h; }\r\n    if(this._x<this._size/2) { this._x=this._size/2; }\r\n    if(this._x>w-this._size/2) { this._x=w-this._size/2; }\r\n    if(this._y<this._size/2) { this._y=this._size/2; }\r\n    if(this._y>h-this._size/2) { this._y=h-this._size/2; }\r\n  };\r\n\r\n  CropArea.prototype._drawArea=function() {};\r\n\r\n  CropArea.prototype.draw=function() {\r\n    // draw crop area\r\n    this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea);\r\n  };\r\n\r\n  CropArea.prototype.processMouseMove=function() {};\r\n\r\n  CropArea.prototype.processMouseDown=function() {};\r\n\r\n  CropArea.prototype.processMouseUp=function() {};\r\n\r\n  return CropArea;\r\n}]);","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/classes/crop-area-square.js":"'use strict';\r\n\r\ncrop.factory('cropAreaSquare', ['cropArea', function(CropArea) {\r\n  var CropAreaSquare = function() {\r\n    CropArea.apply(this, arguments);\r\n\r\n    this._resizeCtrlBaseRadius = 10;\r\n    this._resizeCtrlNormalRatio = 0.75;\r\n    this._resizeCtrlHoverRatio = 1;\r\n    this._iconMoveNormalRatio = 0.9;\r\n    this._iconMoveHoverRatio = 1.2;\r\n\r\n    this._resizeCtrlNormalRadius = this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio;\r\n    this._resizeCtrlHoverRadius = this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio;\r\n\r\n    this._posDragStartX=0;\r\n    this._posDragStartY=0;\r\n    this._posResizeStartX=0;\r\n    this._posResizeStartY=0;\r\n    this._posResizeStartSize=0;\r\n\r\n    this._resizeCtrlIsHover = -1;\r\n    this._areaIsHover = false;\r\n    this._resizeCtrlIsDragging = -1;\r\n    this._areaIsDragging = false;\r\n  };\r\n\r\n  CropAreaSquare.prototype = new CropArea();\r\n\r\n  CropAreaSquare.prototype._calcSquareCorners=function() {\r\n    var hSize=this._size/2;\r\n    return [\r\n      [this._x-hSize, this._y-hSize],\r\n      [this._x+hSize, this._y-hSize],\r\n      [this._x-hSize, this._y+hSize],\r\n      [this._x+hSize, this._y+hSize]\r\n    ];\r\n  };\r\n\r\n  CropAreaSquare.prototype._calcSquareDimensions=function() {\r\n    var hSize=this._size/2;\r\n    return {\r\n      left: this._x-hSize,\r\n      top: this._y-hSize,\r\n      right: this._x+hSize,\r\n      bottom: this._y+hSize\r\n    };\r\n  };\r\n\r\n  CropAreaSquare.prototype._isCoordWithinArea=function(coord) {\r\n    var squareDimensions=this._calcSquareDimensions();\r\n    return (coord[0]>=squareDimensions.left&&coord[0]<=squareDimensions.right&&coord[1]>=squareDimensions.top&&coord[1]<=squareDimensions.bottom);\r\n  };\r\n\r\n  CropAreaSquare.prototype._isCoordWithinResizeCtrl=function(coord) {\r\n    var resizeIconsCenterCoords=this._calcSquareCorners();\r\n    var res=-1;\r\n    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {\r\n      var resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n      if(coord[0] > resizeIconCenterCoords[0] - this._resizeCtrlHoverRadius && coord[0] < resizeIconCenterCoords[0] + this._resizeCtrlHoverRadius &&\r\n         coord[1] > resizeIconCenterCoords[1] - this._resizeCtrlHoverRadius && coord[1] < resizeIconCenterCoords[1] + this._resizeCtrlHoverRadius) {\r\n        res=i;\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  CropAreaSquare.prototype._drawArea=function(ctx,centerCoords,size){\r\n    var hSize=size/2;\r\n    ctx.rect(centerCoords[0]-hSize,centerCoords[1]-hSize,size,size);\r\n  };\r\n\r\n  CropAreaSquare.prototype.draw=function() {\r\n    CropArea.prototype.draw.apply(this, arguments);\r\n\r\n    // draw move icon\r\n    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n    // draw resize cubes\r\n    var resizeIconsCenterCoords=this._calcSquareCorners();\r\n    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {\r\n      var resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n      this._cropCanvas.drawIconResizeCircle(resizeIconCenterCoords, this._resizeCtrlBaseRadius, this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio);\r\n    }\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n    var cursor='default';\r\n    var res=false;\r\n\r\n    this._resizeCtrlIsHover = -1;\r\n    this._areaIsHover = false;\r\n\r\n    if (this._areaIsDragging) {\r\n      this._x = mouseCurX - this._posDragStartX;\r\n      this._y = mouseCurY - this._posDragStartY;\r\n      this._areaIsHover = true;\r\n      cursor='move';\r\n      res=true;\r\n      this._events.trigger('area-move');\r\n    } else if (this._resizeCtrlIsDragging>-1) {\r\n      var xMulti, yMulti;\r\n      switch(this._resizeCtrlIsDragging) {\r\n        case 0: // Top Left\r\n          xMulti=-1;\r\n          yMulti=-1;\r\n          cursor = 'nwse-resize';\r\n          break;\r\n        case 1: // Top Right\r\n          xMulti=1;\r\n          yMulti=-1;\r\n          cursor = 'nesw-resize';\r\n          break;\r\n        case 2: // Bottom Left\r\n          xMulti=-1;\r\n          yMulti=1;\r\n          cursor = 'nesw-resize';\r\n          break;\r\n        case 3: // Bottom Right\r\n          xMulti=1;\r\n          yMulti=1;\r\n          cursor = 'nwse-resize';\r\n          break;\r\n      }\r\n      var iFX = (mouseCurX - this._posResizeStartX)*xMulti;\r\n      var iFY = (mouseCurY - this._posResizeStartY)*yMulti;\r\n      var iFR;\r\n      if(iFX>iFY) {\r\n        iFR = this._posResizeStartSize + iFY;\r\n      } else {\r\n        iFR = this._posResizeStartSize + iFX;\r\n      }\r\n      var wasSize=this._size;\r\n      this._size = Math.max(this._minSize, iFR);\r\n      var posModifier=(this._size-wasSize)/2;\r\n      this._x+=posModifier*xMulti;\r\n      this._y+=posModifier*yMulti;\r\n      this._resizeCtrlIsHover = this._resizeCtrlIsDragging;\r\n      res=true;\r\n      this._events.trigger('area-resize');\r\n    } else {\r\n      var hoveredResizeBox=this._isCoordWithinResizeCtrl([mouseCurX,mouseCurY]);\r\n      if (hoveredResizeBox>-1) {\r\n        switch(hoveredResizeBox) {\r\n          case 0:\r\n            cursor = 'nwse-resize';\r\n            break;\r\n          case 1:\r\n            cursor = 'nesw-resize';\r\n            break;\r\n          case 2:\r\n            cursor = 'nesw-resize';\r\n            break;\r\n          case 3:\r\n            cursor = 'nwse-resize';\r\n            break;\r\n        }\r\n        this._areaIsHover = false;\r\n        this._resizeCtrlIsHover = hoveredResizeBox;\r\n        res=true;\r\n      } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {\r\n        cursor = 'move';\r\n        this._areaIsHover = true;\r\n        res=true;\r\n      }\r\n    }\r\n\r\n    this._dontDragOutside();\r\n    angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n    return res;\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n    var isWithinResizeCtrl=this._isCoordWithinResizeCtrl([mouseDownX,mouseDownY]);\r\n    if (isWithinResizeCtrl>-1) {\r\n      this._areaIsDragging = false;\r\n      this._areaIsHover = false;\r\n      this._resizeCtrlIsDragging = isWithinResizeCtrl;\r\n      this._resizeCtrlIsHover = isWithinResizeCtrl;\r\n      this._posResizeStartX=mouseDownX;\r\n      this._posResizeStartY=mouseDownY;\r\n      this._posResizeStartSize = this._size;\r\n      this._events.trigger('area-resize-start');\r\n    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = true;\r\n      this._areaIsHover = true;\r\n      this._resizeCtrlIsDragging = -1;\r\n      this._resizeCtrlIsHover = -1;\r\n      this._posDragStartX = mouseDownX - this._x;\r\n      this._posDragStartY = mouseDownY - this._y;\r\n      this._events.trigger('area-move-start');\r\n    }\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {\r\n    if(this._areaIsDragging) {\r\n      this._areaIsDragging = false;\r\n      this._events.trigger('area-move-end');\r\n    }\r\n    if(this._resizeCtrlIsDragging>-1) {\r\n      this._resizeCtrlIsDragging = -1;\r\n      this._events.trigger('area-resize-end');\r\n    }\r\n    this._areaIsHover = false;\r\n    this._resizeCtrlIsHover = -1;\r\n\r\n    this._posDragStartX = 0;\r\n    this._posDragStartY = 0;\r\n  };\r\n\r\n\r\n  return CropAreaSquare;\r\n}]);","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/classes/crop-canvas.js":"'use strict';\r\n\r\ncrop.factory('cropCanvas', [function() {\r\n  // Shape = Array of [x,y]; [0, 0] - center\r\n  var shapeArrowNW=[[-0.5,-2],[-3,-4.5],[-0.5,-7],[-7,-7],[-7,-0.5],[-4.5,-3],[-2,-0.5]];\r\n  var shapeArrowNE=[[0.5,-2],[3,-4.5],[0.5,-7],[7,-7],[7,-0.5],[4.5,-3],[2,-0.5]];\r\n  var shapeArrowSW=[[-0.5,2],[-3,4.5],[-0.5,7],[-7,7],[-7,0.5],[-4.5,3],[-2,0.5]];\r\n  var shapeArrowSE=[[0.5,2],[3,4.5],[0.5,7],[7,7],[7,0.5],[4.5,3],[2,0.5]];\r\n  var shapeArrowN=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]];\r\n  var shapeArrowW=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]];\r\n  var shapeArrowS=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]];\r\n  var shapeArrowE=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]];\r\n\r\n  // Colors\r\n  var colors={\r\n    areaOutline: '#fff',\r\n    resizeBoxStroke: '#fff',\r\n    resizeBoxFill: '#444',\r\n    resizeBoxArrowFill: '#fff',\r\n    resizeCircleStroke: '#fff',\r\n    resizeCircleFill: '#444',\r\n    moveIconFill: '#fff'\r\n  };\r\n\r\n  return function(ctx){\r\n\r\n    /* Base functions */\r\n\r\n    // Calculate Point\r\n    var calcPoint=function(point,offset,scale) {\r\n        return [scale*point[0]+offset[0], scale*point[1]+offset[1]];\r\n    };\r\n\r\n    // Draw Filled Polygon\r\n    var drawFilledPolygon=function(shape,fillStyle,centerCoords,scale) {\r\n        ctx.save();\r\n        ctx.fillStyle = fillStyle;\r\n        ctx.beginPath();\r\n        var pc, pc0=calcPoint(shape[0],centerCoords,scale);\r\n        ctx.moveTo(pc0[0],pc0[1]);\r\n\r\n        for(var p in shape) {\r\n            if (p > 0) {\r\n                pc=calcPoint(shape[p],centerCoords,scale);\r\n                ctx.lineTo(pc[0],pc[1]);\r\n            }\r\n        }\r\n\r\n        ctx.lineTo(pc0[0],pc0[1]);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n    };\r\n\r\n\r\n    /* Icons */\r\n\r\n    this.drawIconMove=function(centerCoords, scale) {\r\n      drawFilledPolygon(shapeArrowN, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowW, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowS, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowE, colors.moveIconFill, centerCoords, scale);\r\n    };\r\n\r\n    this.drawIconResizeCircle=function(centerCoords, circleRadius, scale) {\r\n      var scaledCircleRadius=circleRadius*scale;\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.resizeCircleStroke;\r\n      ctx.lineWidth = 2;\r\n      ctx.fillStyle = colors.resizeCircleFill;\r\n      ctx.beginPath();\r\n      ctx.arc(centerCoords[0],centerCoords[1],scaledCircleRadius,0,2*Math.PI);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n      ctx.restore();\r\n    };\r\n\r\n    this.drawIconResizeBoxBase=function(centerCoords, boxSize, scale) {\r\n      var scaledBoxSize=boxSize*scale;\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.resizeBoxStroke;\r\n      ctx.lineWidth = 2;\r\n      ctx.fillStyle = colors.resizeBoxFill;\r\n      ctx.fillRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n      ctx.strokeRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n      ctx.restore();\r\n    };\r\n    this.drawIconResizeBoxNESW=function(centerCoords, boxSize, scale) {\r\n      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n      drawFilledPolygon(shapeArrowNE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowSW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n    };\r\n    this.drawIconResizeBoxNWSE=function(centerCoords, boxSize, scale) {\r\n      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n      drawFilledPolygon(shapeArrowNW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowSE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n    };\r\n\r\n    /* Crop Area */\r\n\r\n    this.drawCropArea=function(image, centerCoords, size, fnDrawClipPath) {\r\n      var xRatio=image.width/ctx.canvas.width,\r\n          yRatio=image.height/ctx.canvas.height,\r\n          xLeft=centerCoords[0]-size/2,\r\n          yTop=centerCoords[1]-size/2;\r\n\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.areaOutline;\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      fnDrawClipPath(ctx, centerCoords, size);\r\n      ctx.stroke();\r\n      ctx.clip();\r\n\r\n      // draw part of original image\r\n      if (size > 0) {\r\n          ctx.drawImage(image, xLeft*xRatio, yTop*yRatio, size*xRatio, size*yRatio, xLeft, yTop, size, size);\r\n      }\r\n\r\n      ctx.beginPath();\r\n      fnDrawClipPath(ctx, centerCoords, size);\r\n      ctx.stroke();\r\n      ctx.clip();\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n  };\r\n}]);","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/classes/crop-host.js":"'use strict';\r\n\r\ncrop.factory('cropHost', ['$document', 'cropAreaCircle', 'cropAreaSquare', function($document, CropAreaCircle, CropAreaSquare) {\r\n  /* STATIC FUNCTIONS */\r\n\r\n  // Get Element's Offset\r\n  var getElementOffset=function(elem) {\r\n      var box = elem.getBoundingClientRect();\r\n\r\n      var body = document.body;\r\n      var docElem = document.documentElement;\r\n\r\n      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\r\n      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\r\n\r\n      var clientTop = docElem.clientTop || body.clientTop || 0;\r\n      var clientLeft = docElem.clientLeft || body.clientLeft || 0;\r\n\r\n      var top  = box.top +  scrollTop - clientTop;\r\n      var left = box.left + scrollLeft - clientLeft;\r\n\r\n      return { top: Math.round(top), left: Math.round(left) };\r\n  };\r\n\r\n  return function(elCanvas, opts, events){\r\n    /* PRIVATE VARIABLES */\r\n\r\n    // Object Pointers\r\n    var ctx=null,\r\n        image=null,\r\n        theArea=null;\r\n\r\n    // Dimensions\r\n    var minCanvasDims=[100,100],\r\n        maxCanvasDims=[300,300];\r\n\r\n    // Result Image size\r\n    var resImgSize=200;\r\n\r\n    /* PRIVATE FUNCTIONS */\r\n\r\n    // Draw Scene\r\n    function drawScene() {\r\n      // clear canvas\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n      if(image!==null) {\r\n        // draw source image\r\n        ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        ctx.save();\r\n\r\n        // and make it darker\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        ctx.restore();\r\n\r\n        // draw Area\r\n        theArea.draw();\r\n      }\r\n    }\r\n\r\n    // Resets CropHost\r\n    var resetCropHost=function() {\r\n      if(image!==null) {\r\n        theArea.setImage(image);\r\n        var imageDims=[image.width, image.height],\r\n            imageRatio=image.width/image.height,\r\n            canvasDims=imageDims;\r\n\r\n        if(canvasDims[0]>maxCanvasDims[0]) {\r\n          canvasDims[0]=maxCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        } else if(canvasDims[0]<minCanvasDims[0]) {\r\n          canvasDims[0]=minCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        }\r\n        if(canvasDims[1]>maxCanvasDims[1]) {\r\n          canvasDims[1]=maxCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        } else if(canvasDims[1]<minCanvasDims[1]) {\r\n          canvasDims[1]=minCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        }\r\n        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n        theArea.setX(ctx.canvas.width/2);\r\n        theArea.setY(ctx.canvas.height/2);\r\n        theArea.setSize(Math.min(200, ctx.canvas.width/2, ctx.canvas.height/2));\r\n      } else {\r\n        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});\r\n      }\r\n\r\n      drawScene();\r\n    };\r\n\r\n    var onMouseMove=function(e) {\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchmove') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseMove(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    var onMouseDown=function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchstart') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseDown(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    var onMouseUp=function(e) {\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchend') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseUp(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n\r\n    this.getResultImageDataURI=function() {\r\n      var temp_ctx, temp_canvas;\r\n      temp_canvas = angular.element('<canvas></canvas>')[0];\r\n      temp_ctx = temp_canvas.getContext('2d');\r\n      temp_canvas.width = resImgSize;\r\n      temp_canvas.height = resImgSize;\r\n      if(image!==null){\r\n        temp_ctx.drawImage(image, (theArea.getX()-theArea.getSize()/2)*(image.width/ctx.canvas.width), (theArea.getY()-theArea.getSize()/2)*(image.height/ctx.canvas.height), theArea.getSize()*(image.width/ctx.canvas.width), theArea.getSize()*(image.height/ctx.canvas.height), 0, 0, resImgSize, resImgSize);\r\n      }\r\n      return temp_canvas.toDataURL();\r\n    };\r\n\r\n    this.setNewImageSource=function(imageSource) {\r\n      image=null;\r\n      resetCropHost();\r\n      events.trigger('image-updated');\r\n      if(!!imageSource) {\r\n        var newImage = new Image();\r\n        newImage.onload = function(){\r\n          events.trigger('load-done');\r\n          image=newImage;\r\n          resetCropHost();\r\n          events.trigger('image-updated');\r\n        };\r\n        newImage.onerror=function() {\r\n          events.trigger('load-error');\r\n        };\r\n        events.trigger('load-start');\r\n        newImage.src=imageSource;\r\n      }\r\n    };\r\n\r\n    this.setMaxDimensions=function(width, height) {\r\n      maxCanvasDims=[width,height];\r\n\r\n      if(image!==null) {\r\n        var curWidth=ctx.canvas.width,\r\n            curHeight=ctx.canvas.height;\r\n\r\n        var imageDims=[image.width, image.height],\r\n            imageRatio=image.width/image.height,\r\n            canvasDims=imageDims;\r\n\r\n        if(canvasDims[0]>maxCanvasDims[0]) {\r\n          canvasDims[0]=maxCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        } else if(canvasDims[0]<minCanvasDims[0]) {\r\n          canvasDims[0]=minCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        }\r\n        if(canvasDims[1]>maxCanvasDims[1]) {\r\n          canvasDims[1]=maxCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        } else if(canvasDims[1]<minCanvasDims[1]) {\r\n          canvasDims[1]=minCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        }\r\n        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n        var ratioNewCurWidth=ctx.canvas.width/curWidth,\r\n            ratioNewCurHeight=ctx.canvas.height/curHeight,\r\n            ratioMin=Math.min(ratioNewCurWidth, ratioNewCurHeight);\r\n\r\n        theArea.setX(theArea.getX()*ratioNewCurWidth);\r\n        theArea.setY(theArea.getY()*ratioNewCurHeight);\r\n        theArea.setSize(theArea.getSize()*ratioMin);\r\n      } else {\r\n        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});\r\n      }\r\n\r\n      drawScene();\r\n\r\n    };\r\n\r\n    this.setAreaMinSize=function(size) {\r\n      size=parseInt(size,10);\r\n      if(!isNaN(size)) {\r\n        theArea.setMinSize(size);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    this.setResultImageSize=function(size) {\r\n      size=parseInt(size,10);\r\n      if(!isNaN(size)) {\r\n        resImgSize=size;\r\n      }\r\n    };\r\n\r\n    this.setAreaType=function(type) {\r\n      var curSize=theArea.getSize(),\r\n          curMinSize=theArea.getMinSize(),\r\n          curX=theArea.getX(),\r\n          curY=theArea.getY();\r\n\r\n      var AreaClass=CropAreaCircle;\r\n      if(type==='square') {\r\n        AreaClass=CropAreaSquare;\r\n      }\r\n      theArea = new AreaClass(ctx, events);\r\n      theArea.setMinSize(curMinSize);\r\n      theArea.setSize(curSize);\r\n      theArea.setX(curX);\r\n      theArea.setY(curY);\r\n\r\n      // resetCropHost();\r\n      if(image!==null) {\r\n        theArea.setImage(image);\r\n      }\r\n\r\n      drawScene();\r\n    };\r\n\r\n    /* Life Cycle begins */\r\n\r\n    // Init Context var\r\n    ctx = elCanvas[0].getContext('2d');\r\n\r\n    // Init CropArea\r\n    theArea = new CropAreaCircle(ctx, events);\r\n\r\n    // Init Mouse Event Listeners\r\n    $document.on('mousemove',onMouseMove);\r\n    elCanvas.on('mousedown',onMouseDown);\r\n    $document.on('mouseup',onMouseUp);\r\n\r\n    // Init Touch Event Listeners\r\n    $document.on('touchmove',onMouseMove);\r\n    elCanvas.on('touchstart',onMouseDown);\r\n    $document.on('touchend',onMouseUp);\r\n\r\n    // CropHost Destructor\r\n    this.destroy=function() {\r\n      $document.off('mousemove',onMouseMove);\r\n      elCanvas.off('mousedown',onMouseDown);\r\n      $document.off('mouseup',onMouseMove);\r\n\r\n      $document.off('touchmove',onMouseMove);\r\n      elCanvas.off('touchstart',onMouseDown);\r\n      $document.off('touchend',onMouseMove);\r\n\r\n      elCanvas.remove();\r\n    };\r\n  };\r\n\r\n}]);\r\n","/home/travis/build/npmtest/node-npmtest-ng-img-crop/node_modules/ng-img-crop/source/js/classes/crop-pubsub.js":"'use strict';\r\n\r\ncrop.factory('cropPubSub', [function() {\r\n  return function() {\r\n    var events = {};\r\n    // Subscribe\r\n    this.on = function(names, handler) {\r\n      names.split(' ').forEach(function(name) {\r\n        if (!events[name]) {\r\n          events[name] = [];\r\n        }\r\n        events[name].push(handler);\r\n      });\r\n      return this;\r\n    };\r\n    // Publish\r\n    this.trigger = function(name, args) {\r\n      angular.forEach(events[name], function(handler) {\r\n        handler.call(null, args);\r\n      });\r\n      return this;\r\n    };\r\n  };\r\n}]);"}